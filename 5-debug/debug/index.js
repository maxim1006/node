"use strict";

var http = require("http");
var fav = require("fav");

var server = new http.Server((req, res) => {

    debugger; //это типо точка останова

    //stop favicon reqs
    if (fav.stop(req, res)) return;

    //1ый способ задания заголовков
    res.statusCode = 200;
    res.setHeader('Cash-control', 'no-cash'); //Запрещаю кеширование
    res.setHeader('Content-type', 'text/html;charset=utf-8'); //задаю тип контента и кодировку

    res.end('Привет');
    console.log(123);
});

server.listen('2000');

//Первый способ
//в консоли пишу node debug имя_файла
// команды:
// repl - переход в режим исполнения команд (могу посмотреть значения переменных и т.д.)
// соnt - продолжать дебаг
// help  - посмотреть какие еще есть команды



//Второй
/**
 * npm i node-inspector -g - модуль для отладки в хроме
 * node --debug имя_скрипта - с этим флагом нода запускает не только файл, но и слушает порт
 * затем в отдельно консоли запускаю node-inspector, захожу по урле и обновляю страницу где запустил сервер, и фигарю как с веб тулзами
 *
 * Чтобы отловить js ошибку, то также как и в браузерных тулзах делаю остановку на любой js ошибке, на странице отладчика
 *
 *
 * Чтобы отладить просто js код, без сервера, т.е. который просто выполниться и все, то использую команду node --debug-brk имя_скрипта и захожу в node-inspector в браузере
 */

//Третий
/*
*  С помощью IDE
*
*
* */
